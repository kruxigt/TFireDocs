var documenterSearchIndex = {"docs":
[{"location":"internet_source_yahoo_data.html#Yahoo-Data","page":"Yahoo Data","title":"Yahoo Data","text":"","category":"section"},{"location":"internet_source_yahoo_data.html","page":"Yahoo Data","title":"Yahoo Data","text":"Available Data Fields for Yahoo Data are :close, :adj_close, :open, :low, :high, :volume\nAvailable tick sizes (resolution) for the last 60 days are 1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h \nAvailable tick sizes (resolution) for other time periods are 1d, 5d, 1wk, 1mo, 3mo ","category":"page"},{"location":"internet_source_yahoo_data.html","page":"Yahoo Data","title":"Yahoo Data","text":"CurrentModule = TFire","category":"page"},{"location":"internet_source_yahoo_data.html#Functions","page":"Yahoo Data","title":"Functions","text":"","category":"section"},{"location":"internet_source_yahoo_data.html","page":"Yahoo Data","title":"Yahoo Data","text":"\n\n\n","category":"page"},{"location":"collection.html#Collection","page":"Collection","title":"Collection","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"The Collection is a container of Entries, where every Entry is contains a number of samples. A sample is a part of a time series. All the samples in one Entry are linked to the same time series. These time series are containd in the SimpleFastDB (SFDB) and are linked to the Entry.","category":"page"},{"location":"collection.html","page":"Collection","title":"Collection","text":"The recommended way to access time series and Layer data are through DataViews","category":"page"},{"location":"collection.html#Collection-Settings","page":"Collection","title":"Collection Settings","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"Beskriv kort och lÃ¤nka sen till riktiga settings The Settings contains all of the Parameters for a Collection and its Layers. Every Collection has two Settings attached to it. One, the settings_used field represent the settings that was used for the Collection. The other, the settings field, represents the settings that will be used if additional layers are added to the collection or if the layers of the colletion are redone.","category":"page"},{"location":"collection.html","page":"Collection","title":"Collection","text":"Collections may also be treated as sets, with all major set functions... link to sets","category":"page"},{"location":"collection.html#Basic-pruning","page":"Collection","title":"Basic pruning","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"julia> collection[\"MMM\"]\n||Collection|| (Continuous)\nTicker: MMM\nSamples: 3352\n\njulia> collection[Date(2010,1,12)]\n||Collection|| (Continuous)\nTickers: 2, MMM AOS\nSamples: 2","category":"page"},{"location":"collection.html#Advanced-pruning","page":"Collection","title":"Advanced pruning","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"Set operations etc, filtering etc","category":"page"},{"location":"collection.html#Entries","page":"Collection","title":"Entries","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"The Entries come in two variants, EntriesContinuous and EntriesDiscrete where the former is used for assets with a continuous time series, for example a stock at a daily resolution whereas the latter is used when the underlying time series is discontinuous, for example a stock at minute resolution (that is not traded 24/7).","category":"page"},{"location":"collection.html","page":"Collection","title":"Collection","text":"EntriesContinuous is implemented as a Dict{String, Entry} where the String is some identification of the Entry. For a stock this is usually the ticker symbol.  Entry","category":"page"},{"location":"collection.html","page":"Collection","title":"Collection","text":"CurrentModule = TFire","category":"page"},{"location":"collection.html#Functions","page":"Collection","title":"Functions","text":"","category":"section"},{"location":"collection.html","page":"Collection","title":"Collection","text":"\nget_tickers(col::Collection)\nnumber_of_samples(col::Collection)\ncondensate_type(col::Collection)\nget_first_entry(collection::Collection)\nlist_layer_types(col::Collection)\nlayer_type(col::Collection)\ncopy_collection(col::Collection)\nget_first_entry(entries::T) where T <: Entries\nnumber_of_samples(entries::EntriesCon)\nnumber_of_samples(entries::EntriesDisc)\nget_tickers(entries::EntriesCon)\nget_tickers(entries::EntriesDisc)\nlist_layer_types(entries::T) where T <: Entries\nlayer_type(entries::T) where T <: Entries\nget_entries_with_condansate_type(entries::EntriesCon{E}, ctype::Type{T}) where {E<:Entries, T<:Condensate} \ncopy_entries(entries::EntriesCon)\ncopy_entries(entries::EntriesDisc)\ndelete_empty_entries!(entries::EntriesCon)\ndelete_empty_entries!(entries::EntriesDisc)","category":"page"},{"location":"collection.html#TFire.get_tickers-Tuple{TFire.Collection}","page":"Collection","title":"TFire.get_tickers","text":" get_tickers(col::Collection)\n\nReturns a vector with the names of all the tickers in the collection. For continuous entries the names are ordered as the entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.number_of_samples-Tuple{TFire.Collection}","page":"Collection","title":"TFire.number_of_samples","text":"number_of_samples(col::Collection)\n\nTotal number of samples for all entries in collection.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.condensate_type-Tuple{TFire.Collection}","page":"Collection","title":"TFire.condensate_type","text":"condensate_type(col::Collection)\n\nThe type of the outermost (latest) condensate in the entries of the collection.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.get_first_entry-Tuple{TFire.Collection}","page":"Collection","title":"TFire.get_first_entry","text":"get_first_entry(collection::Collection{T}) where T <: Entries\n\nReturns the first entry from the iterator over all the entries in the collection. Useful if one needs to get an entry but doesn't care which.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.list_layer_types-Tuple{TFire.Collection}","page":"Collection","title":"TFire.list_layer_types","text":"list_layer_types(col::Collection)\n\nReturns a vector with the condensate types for the entries in the collection. Outermost condensate first.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.layer_type-Tuple{TFire.Collection}","page":"Collection","title":"TFire.layer_type","text":"layer_type(col::Collection)\n\nReturns outermost condansate type.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.copy_collection-Tuple{TFire.Collection}","page":"Collection","title":"TFire.copy_collection","text":"copy_collection(col::Collection)\n\nReturns a deepcopy of the collection.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.get_first_entry-Tuple{T} where T<:TFire.Entries","page":"Collection","title":"TFire.get_first_entry","text":"get_first_entry(entries::T) where T <: Entries\n\nReturns the first entry from the iterator over all entries. Useful if one needs to get an entry but doesn't care which.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.number_of_samples-Tuple{TFire.EntriesCon}","page":"Collection","title":"TFire.number_of_samples","text":"number_of_samples(entries::EntriesCon)\n\nTotal number of samples for all entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.number_of_samples-Tuple{TFire.EntriesDisc}","page":"Collection","title":"TFire.number_of_samples","text":"number_of_samples(entries::EntriesDisc)\n\nTotal number of samples for all entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.get_tickers-Tuple{TFire.EntriesCon}","page":"Collection","title":"TFire.get_tickers","text":" get_tickers(entries::EntriesCon)\n\nReturns a vector with the names of all the tickers in the entries. For continuous entries the names are ordered as the entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.get_tickers-Tuple{TFire.EntriesDisc}","page":"Collection","title":"TFire.get_tickers","text":" get_tickers(entries::EntriesDisc)\n\nReturns a vector with the names of all the tickers in the entries. For continuous entries the names are ordered as the entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.list_layer_types-Tuple{T} where T<:TFire.Entries","page":"Collection","title":"TFire.list_layer_types","text":"list_layer_types(entries::T) where T <: Entries\n\nReturns a vector with the condensate types for the entries. Outermost condensate first.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.layer_type-Tuple{T} where T<:TFire.Entries","page":"Collection","title":"TFire.layer_type","text":"layer_type(entries::T) where T <: Entries\n\nReturns outermost condansate type.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.get_entries_with_condansate_type-Union{Tuple{T}, Tuple{E}, Tuple{TFire.EntriesCon{E}, Type{T}}} where {E<:TFire.Entries, T<:TFire.Condensate}","page":"Collection","title":"TFire.get_entries_with_condansate_type","text":"get_entries_with_condansate_type(entries::EntriesCon{E}, ctype::Type{T}) where {E<:Entries, T<:Condensate}\n\nReturns the entries with condensate type ctype. If the condensate type does not exist return nothing.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.copy_entries-Tuple{TFire.EntriesCon}","page":"Collection","title":"TFire.copy_entries","text":"copy_entries(entries::EntriesCon)\n\nReturns a deepcopy of the entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.copy_entries-Tuple{TFire.EntriesDisc}","page":"Collection","title":"TFire.copy_entries","text":"copy_entries(entries::EntriesDisc)\n\nReturns a deepcopy of the entries.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.delete_empty_entries!-Tuple{TFire.EntriesCon}","page":"Collection","title":"TFire.delete_empty_entries!","text":"delete_empty_entries!(entries::EntriesCon)\n\nDeletes entries with length 0 (no samples) inplace.\n\n\n\n\n\n","category":"method"},{"location":"collection.html#TFire.delete_empty_entries!-Tuple{TFire.EntriesDisc}","page":"Collection","title":"TFire.delete_empty_entries!","text":"delete_empty_entries!(entries::EntriesDisc)\n\nDeletes entries with length 0 (no samples) inplace.\n\n\n\n\n\n","category":"method"},{"location":"settings.html#Settings","page":"Settings","title":"Settings","text":"","category":"section"},{"location":"settings.html","page":"Settings","title":"Settings","text":"note: Note\nsettings_used vs settings","category":"page"},{"location":"settings.html","page":"Settings","title":"Settings","text":"The Settings contains all of the Parameters for a Collection and its Layers. Every Collection has two Settings attached to it. One, the settings_used field represent the settings that was used for the Collection. The other, the settings field, represents the settings that will be used if additional layers are added to the collection or if the layers of the colletion are redone.","category":"page"},{"location":"settings.html","page":"Settings","title":"Settings","text":"The building blocks of Settings are the Parameters. Every Layer has its on Parameters and the link between the time series and the Collection, The TimeSeriesDataLink, also has its own Parameters.","category":"page"},{"location":"settings.html#Parameters","page":"Settings","title":"Parameters","text":"","category":"section"},{"location":"settings.html","page":"Settings","title":"Settings","text":"The building blocks of Settings are the Parameters. Every Layer has its on Parameters and the link between the time series and the Collection, The TimeSeriesDataLink, also has its own Parameters.","category":"page"},{"location":"settings.html","page":"Settings","title":"Settings","text":"CurrentModule = TFire","category":"page"},{"location":"settings.html#Functions","page":"Settings","title":"Functions","text":"","category":"section"},{"location":"settings.html","page":"Settings","title":"Settings","text":"\n\n\n","category":"page"},{"location":"data_views.html#DataViews","page":"DataViews","title":"DataViews","text":"","category":"section"},{"location":"data_views.html#EntryDataViews","page":"DataViews","title":"EntryDataViews","text":"","category":"section"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"DataViews are a way to access time series Layer data related to an Entry or a Collection.","category":"page"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"For example, if e is an Entry that has a corresponding times series with the field name :volume, then dv = DVTimeSeries(e, :volume) creates a DVTimeSeries  (short for DataViewTimeSeries) which is a subtype to EntryDataView. dv[i][j] then gives the j:th value of the i:th sample, or simplydv[i] gives the whole view  of the volume field that is related to the i:th sample. ","category":"page"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"Likewise, if we have dvl = DVLayerField(e, :field_name, LayerType), then dv[i][j] gives  j:th value of the i:th sample for the field :field_name in the Layer of type LayerType. Here, and in many other cases, the LayerType may be completely omitted if the desired Layer is the outhermost one of the Layers in the Entry.","category":"page"},{"location":"data_views.html#CollectionDataViews","page":"DataViews","title":"CollectionDataViews","text":"","category":"section"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"If instead c is a Collection then cdv = DVTimeSeries(c, :volume) creates a  CDV{DVTimeSeries}  (short for CollectionDataView) which contains the DVTimeSeries for  every Entry in the Collection. Then cdv[1] == DVTimeSeries(e, :volume) for the first Entry e given by the iterator over all Entries. cdv[i][j][k] thus gives the k:th value of the time series of :volume corresponding to the j:th sample in the  i:th Entry. ","category":"page"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"The CDV may also be flattened to a FlatCDV. If fcdv = FlatCDV(cdv) then the views for all samples in the Collection are stored in one dimension so that fcdv[i] gives the corresponding view of the :volume field for the i:th sample in the whole Collection. ","category":"page"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"The FlatCDV is useful when the value for two different fields are to be compared for the same sample without the need to know which precise sample it is. For example if the correlation between two different fields are to be calculated for all samples in a Collection.","category":"page"},{"location":"data_views.html#NonRepainting-DataViews","page":"DataViews","title":"NonRepainting DataViews","text":"","category":"section"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"The NonRepainting Dataviews are useful when constructing NonRepainting Layers. If e is an Entry that has a corresponding times series with the field name :volume, then dv = DVNonRepaintingTimeSeries(e, :volume) creates a  NonRepaintingDVTimeSeries.dv` then contains a view of the volume field from the first datetime contained in any of the i Entry's samples to the last datetime  contained in any of the samples.","category":"page"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"CurrentModule = TFire","category":"page"},{"location":"data_views.html#Functions","page":"DataViews","title":"Functions","text":"","category":"section"},{"location":"data_views.html","page":"DataViews","title":"DataViews","text":"DVTimeSeries(entry::Entry, symbol::Symbol)\nDVNonRepaintingTimeSeries(entry::Entry, symbol::Symbol)\n","category":"page"},{"location":"data_views.html#TFire.DVTimeSeries-Tuple{Entry, Symbol}","page":"DataViews","title":"TFire.DVTimeSeries","text":"DVTimeSeries(entry::CollectionEntry, symbol::Symbol)\n\nView of data from associated time series in SFDB with the name symbol.\n\nThe datetimes are matched to those in the entry so that DVTimeSeries[x][y] gives the time series value corresponding to entry[x][y]\n\n\n\n\n\n","category":"method"},{"location":"data_views.html#TFire.DVNonRepaintingTimeSeries-Tuple{Entry, Symbol}","page":"DataViews","title":"TFire.DVNonRepaintingTimeSeries","text":"DVNonRepaintingTimeSeries(entry::CollectionEntry, symbol::Symbol)\n\nView of data from associated time series in SFDB with the name symbol.\n\nThe datetimes are matched to those in the entry in a non repainting manner so that  DVNonRepaintingTimeSeries[1:end]  equals the time series entries from minimum to maximum of  all datetimes inentry`. Useful for constructing non repainting layers. \n\n\n\n\n\n","category":"method"},{"location":"external_data.html#External-DataHandler","page":"External DataHandler","title":"External DataHandler","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The External Data Handler is a free-standing submodule that handles loading and saving of raw data (from external sources) for time series analysis.. This includes data from various internet sources as well as local disk storage","category":"page"},{"location":"external_data.html#Basic-Usage","page":"External DataHandler","title":"Basic Usage","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The three primary functions for interacting with external data are: ","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"fetch_external_data_from_disk\nsave_to_disk\nfetch_external_data_from_internet","category":"page"},{"location":"external_data.html#Fetching-Data-from-Disk","page":"External DataHandler","title":"Fetching Data from Disk","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"To retrieve external data stored on your local system. use: fetch_external_data_from_disk(ext_cons, file_path; clean_and_prepare=true)","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"ext_cons: Specifies which external data constituents to fetch. See External Constituents\nfile_path: The location on disk where the data is stored.\nclean_and_prepare (optional, default is true): Whether to clean and prepare the data after retrieval.","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"This function supports both CSV and JLD2 file formats. When working with a .csv file, it should point to a list of .jld2 files. The returned data can optionally be cleaned and prepared for further use.","category":"page"},{"location":"external_data.html#Saving-Data-to-Disk","page":"External DataHandler","title":"Saving Data to Disk","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"You can save processed or fetched data onto your local disk using the save_to_disk(edc, file_name, overwrite=true)","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"edc: An instance of ExternalDataCollection that you intend to save. See ExternalDataCollection\nfile_name: The desired name of the file where you wish to save the data. The full path will be designed by the resolution, see Resolution and Directory Structure\noverwrite (optional, default is false): Whether to overwrite an existing file with the same name.","category":"page"},{"location":"external_data.html#Fetching-Data-from-the-Internet","page":"External DataHandler","title":"Fetching Data from the Internet","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"To fetch data directly from online sources, you can use:","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"fetch_external_data_from_internet(ext_cons, service, data_fields, clean_and_prepare=true, verbose_error=true )","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"ext_cons: Specifies which external data constituents to fetch. See External Constituents\nservice: The online service to use (e.g., YahooData). See Internet Data Sources\ndata_fields: Dictates which data fields to download. See DataFieldsExternal.\nclean_and_prepare (optional, default is true): If set to true, the data will be cleaned and prepared after fetching.\nverbose_error (optional, default is true): If true, detailed error messages will be displayed if an error occurs during fetching.","category":"page"},{"location":"external_data.html#Specification-of-Data-to-Fetch","page":"External DataHandler","title":"Specification of Data to Fetch","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The External DataHandler uses two concepts to specify which data to fetch. The first one, the Constituents is used to  specify which tickers to fetch data for at which time periods. The resolution of the data is also specified. Further, Data Fields is used to specify what types of data to include.","category":"page"},{"location":"external_data.html#External-Constituents","page":"External DataHandler","title":"External Constituents","text":"","category":"section"},{"location":"external_data.html#ConstituentsContinuousExt","page":"External DataHandler","title":"ConstituentsContinuousExt","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The Continuous External Constituents is used when the data for each ticker is continuous in time. For example daily close data for an asset that is traded daily.","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"ticker_ranges_external: An ordered dictionary linking tickers to vectors of date-time ranges, indicating time series intervals for each asset.\nresolution: Describes the data granularity, e.g., \"1d\", \"1m\".","category":"page"},{"location":"external_data.html#ConstituentsDiscreteExt","page":"External DataHandler","title":"ConstituentsDiscreteExt","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The Discrete  External Constituents is used when the data for each ticker is discrete in time. For example when intraday data is to be fetched fori several days for an asset that is traded only part of the day, like a stock.","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"dates_external: An ordered dictionary where each date references a ConstituentsContinuousExt, allowing representation of non-continuous data.\nresolution: Specifies the data granularity.","category":"page"},{"location":"external_data.html#DataFieldsExternal","page":"External DataHandler","title":"DataFieldsExternal","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"This struct defines the external data's fields and the type of information to be fetched. The fields member contains a set of symbols, each representing a  specific data field like :close_price or :volume.","category":"page"},{"location":"external_data.html#Internet-Data-Sources","page":"External DataHandler","title":"Internet Data Sources","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"External data can be fetched from various internet sources. Available data providers are","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"Yahoo Data","category":"page"},{"location":"external_data.html#Technicalities","page":"External DataHandler","title":"Technicalities","text":"","category":"section"},{"location":"external_data.html#ExternalData","page":"External DataHandler","title":"ExternalData","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"A mutable structure that encapsulates the raw data for a given ticker. It contains:","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"data: A DataFrame holding the actual data.\nticker: Symbol or name identifying the data.\nresolution: Describes the granularity of the data.\nfrom and to: Defines the time interval for the data. The actual time series might not include data for the whole period if some is missing/nonexistant.","category":"page"},{"location":"external_data.html#ExternalDataCollection","page":"External DataHandler","title":"ExternalDataCollection","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"This structure holds a collection of ExternalData structures.","category":"page"},{"location":"external_data.html#External-Data-File","page":"External DataHandler","title":"External Data File","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The primary tool/format used to save and retrieve external data is the ExternalDataFile. This struct is designed to consolidate different external data types and provide  a consistent way of accessing them.","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"The ExternalDataFile is composed of:","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"A specification, which describes the properties of the data (e.g., resolution and file format version).\nTickers, which associate specific symbols with their corresponding ExternalData.","category":"page"},{"location":"external_data.html#Resolution-and-Directory-Structure","page":"External DataHandler","title":"Resolution and Directory Structure","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"Data resolution determines where data is stored and accessed. The resolution_to_dir function helps translate resolution to the appropriate directory structure, ensuring consistent organization and easy retrieval. The currentrly supported resolutions are daily (1d) and minute (1m).","category":"page"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"CurrentModule = TFire","category":"page"},{"location":"external_data.html#Functions","page":"External DataHandler","title":"Functions","text":"","category":"section"},{"location":"external_data.html","page":"External DataHandler","title":"External DataHandler","text":"\n\n\n","category":"page"},{"location":"back_testing.html#Back-Testing","page":"Back Testing","title":"Back Testing","text":"","category":"section"},{"location":"back_testing.html","page":"Back Testing","title":"Back Testing","text":"CurrentModule = TFire","category":"page"},{"location":"back_testing.html#Functions","page":"Back Testing","title":"Functions","text":"","category":"section"},{"location":"back_testing.html","page":"Back Testing","title":"Back Testing","text":"\n","category":"page"},{"location":"layers.html#Layers","page":"Layers","title":"Layers","text":"","category":"section"},{"location":"layers.html","page":"Layers","title":"Layers","text":"Every Collection may contain one or more Layers. The Layers of one Collection are always stacked on top of each other in a chain. Where each Layer may use information from the Layers below as well as the time series associated with the Collection. If c is Collection then col_sma = LayerSMA(c, )","category":"page"},{"location":"layers.html","page":"Layers","title":"Layers","text":"While there can be a number of serially linked layers like this for a Collection, a Collection may not contain several parallell layers. For parallell layers the Collection instead has to be duplicated. ","category":"page"},{"location":"layers.html","page":"Layers","title":"Layers","text":"Text about Layers","category":"page"},{"location":"layers.html#Creating-New-Layer-Types","page":"Layers","title":"Creating New Layer Types","text":"","category":"section"},{"location":"layers.html","page":"Layers","title":"Layers","text":"The DataViews are an important...","category":"page"},{"location":"layers.html","page":"Layers","title":"Layers","text":"Determine if the layer is going to be repainting or nonrepainting. Beskriv koncepten.","category":"page"},{"location":"layers.html","page":"Layers","title":"Layers","text":"CurrentModule = TFire","category":"page"},{"location":"layers.html#Functions","page":"Layers","title":"Functions","text":"","category":"section"},{"location":"layers.html","page":"Layers","title":"Layers","text":"\n\n\n","category":"page"},{"location":"entry.html#Entry","page":"Entry","title":"Entry","text":"","category":"section"},{"location":"entry.html","page":"Entry","title":"Entry","text":"The Entry is the building blocks that make up the Collection. One Entry represents bla bla","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"A sample does not have any way to access data beyond the evaluation date, making it less likely....","category":"page"},{"location":"entry.html#TimeSeriesDataLink-(Developer)","page":"Entry","title":"TimeSeriesDataLink  (Developer)","text":"","category":"section"},{"location":"entry.html","page":"Entry","title":"Entry","text":"The Time Series Data Link, or short TSDLink, is a link between an entry and a time series (typically  residing in the SimpleFastDB). The TSDLink is a subtype of AssetDataLink in a way that another subtype  of AssetDataLink could possibly replace it.","category":"page"},{"location":"entry.html#Technicalities","page":"Entry","title":"Technicalities","text":"","category":"section"},{"location":"entry.html","page":"Entry","title":"Entry","text":"In practical terms the TSDLink is the uppermost condensate of an entry. It links","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":". It will always  be the uppermost condensate of an entry and is a subtype of AssetDataLink.","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"timeseriesrange is a vector of unit ranges where each range is used together with the index_mod","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"of the time series data link together with that of the time series to calculate the range of values   in the linked time series that are used for the sample.","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"minimumval and maximumval are the minimum and maximum value in timeseriesrange. They are used","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"for calculating the data range for nonrepainting layers.","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"index_mod is copied from the time series in the database at the time of creation of the data link.","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"This is to be able to link to the correct place in the time series even after the time series has been  updated with new data.","category":"page"},{"location":"entry.html","page":"Entry","title":"Entry","text":"CurrentModule = TFire","category":"page"},{"location":"entry.html#Functions","page":"Entry","title":"Functions","text":"","category":"section"},{"location":"entry.html","page":"Entry","title":"Entry","text":"\n\n\n","category":"page"},{"location":"specification.html#Specification","page":"Specification","title":"Specification","text":"","category":"section"},{"location":"specification.html","page":"Specification","title":"Specification","text":"Constituents bla bla","category":"page"},{"location":"specification.html","page":"Specification","title":"Specification","text":"CurrentModule = TFire","category":"page"},{"location":"specification.html#Functions","page":"Specification","title":"Functions","text":"","category":"section"},{"location":"specification.html","page":"Specification","title":"Specification","text":"\nconstituents_continuous(tickers::Vector{String}, dates_vect::Vector{Tuple{DateTime, DateTime}},\n                                 resolution::String) \n\n","category":"page"},{"location":"specification.html#TFire.constituents_continuous-Tuple{Vector{String}, Vector{Tuple{DateTime, DateTime}}, String}","page":"Specification","title":"TFire.constituents_continuous","text":"constituents_continuous(tickers::Vector{String}, dates_vect::Vector{Tuple{DateTime, DateTime}},\n                             resolution::String)\n\nConstructs ConstituentsConstinues from a list of tickers and a \n\n\n\n\n\n","category":"method"},{"location":"index.html#TFire","page":"TFire","title":"TFire","text":"","category":"section"},{"location":"index.html#Basics","page":"TFire","title":"Basics","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"The primary tool used to access and analyse time series is the Collection. It contains a list of Entries, where every Entry represents the time series of a single asset. An Entry typically contains several views into the time series, where each view is a continuous subset of the whole time series. Each such view is called a sample.","category":"page"},{"location":"index.html#Collection-Setup","page":"TFire","title":"Collection Setup","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"Below follows a simple example of how to setup a Collection.","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"julia> tickers = [\"MMM\", \"AOS\"]\n2-element Vector{String}:\n \"MMM\"\n \"AOS\"\n\njulia> eval_dates = dates_range(Date(2001,6,2), Date(2018,6,8))\n6216-element Vector{Date}:\n 2001-06-02...\n\njulia> constituents = constituents_continuous(tickers, eval_dates, 1800); \n\njulia> spec = SpecificationCollection(constituents);\n\njulia> sfdb = setup_simple_fast_db(spec; read_disk=true, read_external=false, data_path = \"Days/spx500_1d.jld2\");\n\njulia> collection = setup_collection(spec, sfdb)\nSetting up collection\n||Collection|| (Continuous)\nTickers: 2, MMM AOS\nSamples: 6704","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"Here the ticker symbols for the assets are defined. Then the \"evaluation dates\" are specified as all dates between 6/2/2001 and 6/8/2018. Then the Constituents for the Collection are defined so that for each asset there is one sample for every date in the evaluation dates, and that every such sample has a view of the associated time series 1800 days back. This time period is the only visible part of the time series for that particular sample. ","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"The Constituents are the included in the Specification together with the DataFields that specify what types of data (like price, volume etc) in the time series that the sample will have access to. Here The DataFields are implicitly defined as their defaults.","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"A SimpleFastDB is set up with the Specification with data from a file on disk, and finally a Collection is then set up. This Collection now links to the corresponding time series in the SimpleFastDB.","category":"page"},{"location":"index.html#Adding-Layers","page":"TFire","title":"Adding Layers","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"The Collection provides an interface to attach Layers to a time series. A layer is a condensate of the data in the time series. Layers may also be, as the name suggests, layered. For example, the first layer could be a pair of Exponential Moving Averages of the price of an asset and the second layer could then be the MACD based on that pair of EMAs.","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"Example of adding layers:","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"\njulia> settings = Settings()\n\njulia> settings[LayerEMA] = Parameters(LayerEMA, :win_sizes => [15,40]);\n\njulia> collection_ema = add_layer(collection, LayerEMA, settings=settings)\n||Collection|| (Continuous) -> LayerEMA\nTickers: 2, MMM AOS\nSamples: 6626\n\njulia> collection_macd = add_layer(collection_ema, LayerMACD)\n||Collection|| (Continuous) -> LayerEMA -> LayerMACD\nTickers: 2, MMM AOS\nSamples: 6626","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"Here the concept of Settings is introduced. This is where parameters for Layers live. They may also contain other types of parameters, which we will soon see. It should be noted that settings was not needed when adding the MACD layer since it was already attached to collection_ema at its creation.","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"Let's have a look at all the settings that has been used","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"julia> collection_macd.settings_used\nLayerMACD\n:signal_period => 9\n:long_period => \"maximum\"\n:short_period => \"minimum\"\n   ---\nTSDLink\n:resolution => \"1d\"\n:default_price_field => :adj_close_log\n   ---\nLayerEMA\n:win_sizes => [15, 40]\n   ---","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"We can see that LayerMACD has settings even though no parameters were specified. This is because all Layers come with default parameters that are used if some parameter is omitted. The parameters for TSDLink specifies the resolution of the time series related to the Collection and which data field that is to be used when a layer requests the \"price\" of an asset. Here, the adjusted logarithmic closing price will then be used if nothing else is specified for a particular layer.","category":"page"},{"location":"index.html#Plotting-the-Graph-for-a-Sample","page":"TFire","title":"Plotting the Graph for a Sample","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"[image of graph]","category":"page"},{"location":"index.html#Analysis","page":"TFire","title":"Analysis","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"Let's say we have a theory that any time the MACD ","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"future returns..","category":"page"},{"location":"index.html#Back-Testing","page":"TFire","title":"Back Testing","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"While much analysis can be done on Collections, for a true","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"Scooring","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"External DataHandler","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"CurrentModule = TFire","category":"page"},{"location":"index.html","page":"TFire","title":"TFire","text":"","category":"page"},{"location":"index.html#Index","page":"TFire","title":"Index","text":"","category":"section"},{"location":"index.html","page":"TFire","title":"TFire","text":"","category":"page"}]
}
